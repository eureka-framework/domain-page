<?php

/*
 * Copyright (c) Romain Cottard
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

declare(strict_types=1);

namespace Eureka\Domain\Page\Entity\Abstracts;

use Eureka\Component\Orm\AbstractEntity;
use Eureka\Component\Orm\RepositoryInterface;
use Eureka\Component\Validation\Exception\ValidationException;
use Eureka\Component\Validation\ValidatorFactoryInterface;
use Eureka\Component\Validation\ValidatorEntityFactoryInterface;

/**
 * Abstract Page data class.
 *
 * /!\ AUTO GENERATED FILE. DO NOT EDIT THIS FILE.
 * You can add your specific code in child class: Page
 *
 * @author Eureka Orm Generator
 */
abstract class AbstractPage extends AbstractEntity
{
    /** @var int $id Property id */
    protected int $id = 0;

    /** @var string $name Property name */
    protected string $name = '';

    /** @var string $slug Property slug */
    protected string $slug = '';

    /** @var string $content Property content */
    protected string $content = '';

    /** @var int $status Property status */
    protected int $status = 0;

    /**
     * AbstractEntity constructor.
     *
     * @param RepositoryInterface $repository
     * @param ValidatorFactoryInterface|null $validatorFactory
     * @param ValidatorEntityFactoryInterface|null $validatorEntityFactory
     */
    public function __construct(
        RepositoryInterface $repository,
        ?ValidatorFactoryInterface $validatorFactory = null,
        ?ValidatorEntityFactoryInterface $validatorEntityFactory = null
    ) {
        $this->setRepository($repository);
        $this->setValidatorFactories($validatorFactory, $validatorEntityFactory);

        $this->setValidatorConfig([
            'page_id' => [
                'type'      => 'integer',
                'options'   => ['min_range' => 0, 'max_range' => 4294967295],
            ],
            'page_name' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 100],
            ],
            'page_slug' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 100],
            ],
            'page_content' => [
                'type'      => 'string',
                'options'   => ['min_length' => 0, 'max_length' => 65535],
            ],
            'page_status' => [
                'type'      => 'integer',
                'options'   => ['min_range' => -128, 'max_range' => 127],
            ],
        ]);
    }

    /**
     * Get cache key
     *
     * @return string
     */
    public function getCacheKey(): string
    {
        return 'eka.dm.blog.page.' . $this->getId();
    }

    /**
     * Get value for property "page_id"
     *
     * @return int
     */
    public function getId(): int
    {
        return $this->id;
    }

    /**
     * Get value for property "page_name"
     *
     * @return string
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * Get value for property "page_slug"
     *
     * @return string
     */
    public function getSlug(): string
    {
        return $this->slug;
    }

    /**
     * Get value for property "page_content"
     *
     * @return string
     */
    public function getContent(): string
    {
        return $this->content;
    }

    /**
     * Get value for property "page_status"
     *
     * @return int
     */
    public function getStatus(): int
    {
        return $this->status;
    }

    /**
     * Set value for property "page_id"
     *
     * @param  int $id
     * @return $this
     * @throws ValidationException
     */
    public function setId(int $id): self
    {
        $this->validateInput('page_id', $id);

        if ($this->exists() && $this->id !== $id) {
            $this->markFieldAsUpdated('id');
        }

        $this->id = $id;

        return $this;
    }

    /**
     * Set auto increment value.
     *
     * @param  integer $id
     * @return $this
     * @throws ValidationException
     */
    public function setAutoIncrementId(int $id): self
    {
        return $this->setId($id);
    }

    /**
     * Set value for property "page_name"
     *
     * @param  string $name
     * @return $this
     * @throws ValidationException
     */
    public function setName(string $name): self
    {
        $this->validateInput('page_name', $name);

        if ($this->exists() && $this->name !== $name) {
            $this->markFieldAsUpdated('name');
        }

        $this->name = $name;

        return $this;
    }

    /**
     * Set value for property "page_slug"
     *
     * @param  string $slug
     * @return $this
     * @throws ValidationException
     */
    public function setSlug(string $slug): self
    {
        $this->validateInput('page_slug', $slug);

        if ($this->exists() && $this->slug !== $slug) {
            $this->markFieldAsUpdated('slug');
        }

        $this->slug = $slug;

        return $this;
    }

    /**
     * Set value for property "page_content"
     *
     * @param  string $content
     * @return $this
     * @throws ValidationException
     */
    public function setContent(string $content): self
    {
        $this->validateInput('page_content', $content);

        if ($this->exists() && $this->content !== $content) {
            $this->markFieldAsUpdated('content');
        }

        $this->content = $content;

        return $this;
    }

    /**
     * Set value for property "page_status"
     *
     * @param  int $status
     * @return $this
     * @throws ValidationException
     */
    public function setStatus(int $status): self
    {
        $this->validateInput('page_status', $status);

        if ($this->exists() && $this->status !== $status) {
            $this->markFieldAsUpdated('status');
        }

        $this->status = $status;

        return $this;
    }
}
